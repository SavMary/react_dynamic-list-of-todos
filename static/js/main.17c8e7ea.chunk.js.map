{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","a","fetch","response","json","userId","then","TodoList","onHandlerUserId","useState","title","setTitle","todos","setTodos","selectedOption","setSelectedOption","allTodos","setAllTodos","useEffect","getTodos","todoItems","filteredByTitle","filter","todo","toLowerCase","includes","completed","visibleTodos","className","type","value","onChange","event","target","placeholder","disabled","map","option","classNames","checked","readOnly","onClick","id","CurrentUser","onHandlerClear","selectedUser","setSelectedUser","getUser","user","name","email","phone","App","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17c8e7ea.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport const API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { getTodos } from '../../api/api';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ntype Props = {\n  onHandlerUserId: (id: number) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ onHandlerUserId }) => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const options = ['all', 'active', 'completed'];\n\n  useEffect(() => {\n    getTodos()\n      .then(todoItems => {\n        setAllTodos(todoItems);\n        setTodos(todoItems);\n      });\n  }, []);\n\n  const filteredByTitle = todos\n    .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n\n  const visibleTodos = () => {\n    switch (selectedOption) {\n      case 'all':\n        setTodos(allTodos);\n        break;\n      case 'active':\n        setTodos([...allTodos].filter(todo => !todo.completed));\n        break;\n      case 'completed':\n        setTodos([...allTodos].filter(todo => todo.completed));\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    visibleTodos();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        value={title}\n        data-cy=\"filterByTitle\"\n        className=\"input\"\n        onChange={(event) => {\n          const { value } = event.target;\n\n          setTitle(value);\n        }}\n        placeholder=\"Enter a todo\"\n      />\n\n      <div className=\"select\">\n        <select\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          <option value=\"\" disabled>Choose an option</option>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => onHandlerUserId(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  userId: number,\n  onHandlerClear: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onHandlerClear }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => {\n        setSelectedUser(user);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser?.id}`}</span></h2>\n\n      <h3\n        className=\"CurrentUser__name\"\n        data-cy=\"userName\"\n      >\n        {selectedUser?.name}\n      </h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        type=\"button\"\n        onClick={onHandlerClear}\n        className=\"button\"\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(0);\n\n  const userIdHandler = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const clearHandler = () => {\n    setSelectedUserId(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          onHandlerUserId={userIdHandler}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onHandlerClear={clearHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}